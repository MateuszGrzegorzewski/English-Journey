// <auto-generated />
using System;
using EnglishJourney.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EnglishJourney.Infrastructure.Migrations
{
    [DbContext(typeof(EnglishJourneyDbContext))]
    [Migration("20240302155113_FlashCardTablesInit")]
    partial class FlashCardTablesInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EnglishJourney.Domain.Entities.ConnectionAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("ConnectionAtrributes");
                });

            modelBuilder.Entity("EnglishJourney.Domain.Entities.ConnectionTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConnectionTopics");
                });

            modelBuilder.Entity("EnglishJourney.Domain.Entities.Flashcard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FlashcardBoxId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastGuessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phrase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FlashcardBoxId")
                        .IsUnique();

                    b.ToTable("Flashcards");
                });

            modelBuilder.Entity("EnglishJourney.Domain.Entities.FlashcardBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoxNumber")
                        .HasColumnType("int");

                    b.Property<int>("FlashcardCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlashcardCategoryId");

                    b.ToTable("FlashcardsBoxes");
                });

            modelBuilder.Entity("EnglishJourney.Domain.Entities.FlashcardCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FlashcardsCategories");
                });

            modelBuilder.Entity("EnglishJourney.Domain.Entities.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchivized")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("EnglishJourney.Domain.Entities.ConnectionAttribute", b =>
                {
                    b.HasOne("EnglishJourney.Domain.Entities.ConnectionTopic", "Topic")
                        .WithMany("Attributes")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("EnglishJourney.Domain.Entities.Flashcard", b =>
                {
                    b.HasOne("EnglishJourney.Domain.Entities.FlashcardBox", "FlashcardBox")
                        .WithOne("Flashcard")
                        .HasForeignKey("EnglishJourney.Domain.Entities.Flashcard", "FlashcardBoxId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("FlashcardBox");
                });

            modelBuilder.Entity("EnglishJourney.Domain.Entities.FlashcardBox", b =>
                {
                    b.HasOne("EnglishJourney.Domain.Entities.FlashcardCategory", "FlashcardCategory")
                        .WithMany("FlashcardBoxes")
                        .HasForeignKey("FlashcardCategoryId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("FlashcardCategory");
                });

            modelBuilder.Entity("EnglishJourney.Domain.Entities.ConnectionTopic", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("EnglishJourney.Domain.Entities.FlashcardBox", b =>
                {
                    b.Navigation("Flashcard");
                });

            modelBuilder.Entity("EnglishJourney.Domain.Entities.FlashcardCategory", b =>
                {
                    b.Navigation("FlashcardBoxes");
                });
#pragma warning restore 612, 618
        }
    }
}
